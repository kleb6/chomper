use Data::Dump::Tree;

use grust-model;
use grust-model-expr;

#-------------------------------------

our role ExprNoStruct::Rules {

=begin comment
    regex expr-nostruct { 
        <expr-nostruct-base> 
        <expr-nostruct-tail>* 
    }

    #-------------------------
    proto regex expr-nostruct-base { * }

    regex expr-nostruct-base:sym<lit>  { <lit> }

    regex expr-nostruct-base:sym<self>                          { <kw-self> }
    regex expr-nostruct-base:sym<macro-expr>                    { <macro-expr> }
    regex expr-nostruct-base:sym<vec-expr>                      { '[' <vec-expr> ']' }
    regex expr-nostruct-base:sym<paren-expr>                    { '(' <maybe-exprs> ')' }
    regex expr-nostruct-base:sym<again>                         { <kw-continue> <ident>? }
    regex expr-nostruct-base:sym<return-expr>                   { <kw-return> <expr> }
    regex expr-nostruct-base:sym<return>                        { <kw-return> }
    regex expr-nostruct-base:sym<break-ident>                   { <kw-break> <ident> }
    regex expr-nostruct-base:sym<break>                         { <kw-break> }
    regex expr-nostruct-base:sym<yield-expr>                    { <kw-yield> <expr> }
    regex expr-nostruct-base:sym<yield>                         { <kw-yield> }
    regex expr-nostruct-base:sym<dotdot-expr-nostruct>          { <tok-dotdot> <expr-nostruct> }
    regex expr-nostruct-base:sym<dotdot>                        { <tok-dotdot> }
    regex expr-nostruct-base:sym<box-expr>                      { <kw-box> <expr> }
    regex expr-nostruct-base:sym<expr-qualified-path>           { <expr-qualified-path> }
    regex expr-nostruct-base:sym<block-expr>                    { <block-expr> }
    regex expr-nostruct-base:sym<block>                         { <block> }
    regex expr-nostruct-base:sym<nonblock-prefix-expr-nostruct> { <nonblock-prefix-expr-nostruct> }
    regex expr-nostruct-base:sym<path-expr>                     { <path-expr> }

    #-------------------------
    proto regex expr-nostruct-tail { * }

    regex expr-nostruct-tail:sym<qmark>             { '?' }
    regex expr-nostruct-tail:sym<dot-path>          { '.' <path-generic-args-with-colons> }
    regex expr-nostruct-tail:sym<dot-lit-int>       { '.' <lit-int> }
    regex expr-nostruct-tail:sym<brack-expr>        { '[' <maybe-expr> ']' }
    regex expr-nostruct-tail:sym<paren-expr>        { '(' <maybe-exprs> ')' }

    regex expr-nostruct-tail:sym<eq-expr>           { '=' <expr-nostruct> }
    regex expr-nostruct-tail:sym<shleq-expr>        { <tok-shleq>       <expr-nostruct> }
    regex expr-nostruct-tail:sym<shreq-expr>        { <tok-shreq>       <expr-nostruct> }
    regex expr-nostruct-tail:sym<minuseq-expr>      { <tok-minuseq>     <expr-nostruct> }
    regex expr-nostruct-tail:sym<andeq-expr>        { <tok-andeq>       <expr-nostruct> }
    regex expr-nostruct-tail:sym<oreq-expr>         { <tok-oreq>        <expr-nostruct> }
    regex expr-nostruct-tail:sym<pluseq-expr>       { <tok-pluseq>      <expr-nostruct> }
    regex expr-nostruct-tail:sym<stareq-expr>       { <tok-stareq>      <expr-nostruct> }
    regex expr-nostruct-tail:sym<slasheq-expr>      { <tok-slasheq>     <expr-nostruct> }
    regex expr-nostruct-tail:sym<careteq-expr>      { <tok-careteq>     <expr-nostruct> }
    regex expr-nostruct-tail:sym<percenteq-expr>    { <tok-percenteq>   <expr-nostruct> }

    regex expr-nostruct-tail:sym<oror-expr>         { <tok-oror>        <expr-nostruct> }
    regex expr-nostruct-tail:sym<andand-expr>       { <tok-andand>      <expr-nostruct> }
    regex expr-nostruct-tail:sym<eqeq-expr>         { <tok-eqeq>        <expr-nostruct> }
    regex expr-nostruct-tail:sym<ne-expr>           { <tok-ne>          <expr-nostruct> }
    regex expr-nostruct-tail:sym<lt-expr>           { '<'               <expr-nostruct> }
    regex expr-nostruct-tail:sym<gt-expr>           { '>'               <expr-nostruct> }
    regex expr-nostruct-tail:sym<le-expr>           { <tok-le>          <expr-nostruct> }
    regex expr-nostruct-tail:sym<ge-expr>           { <tok-ge>          <expr-nostruct> }
    regex expr-nostruct-tail:sym<pipe-expr>         { '|'               <expr-nostruct> }
    regex expr-nostruct-tail:sym<caret-expr>        { '^'               <expr-nostruct> }
    regex expr-nostruct-tail:sym<amp-expr>          { '&'               <expr-nostruct> }
    regex expr-nostruct-tail:sym<shl-expr>          { <tok-shl>         <expr-nostruct> }
    regex expr-nostruct-tail:sym<shr-expr>          { <tok-shr>         <expr-nostruct> }
    regex expr-nostruct-tail:sym<plus-expr>         { '+'               <expr-nostruct> }
    regex expr-nostruct-tail:sym<minus-expr>        { '-'               <expr-nostruct> }
    regex expr-nostruct-tail:sym<star-expr>         { '*'               <expr-nostruct> }
    regex expr-nostruct-tail:sym<slash-expr>        { '/'               <expr-nostruct> }
    regex expr-nostruct-tail:sym<mod-expr>          { '%'               <expr-nostruct> }

    regex expr-nostruct-tail:sym<dotdot-nostruct>   { <tok-dotdot>      <expr-nostruct> }
    regex expr-nostruct-tail:sym<dotdot> { 
        <tok-dotdot>      
        #{ self.set-prec(RANGE) } 
    }

    regex expr-nostruct-tail:sym<as-try>    { <kw-as> <ty> }
    regex expr-nostruct-tail:sym<colon-try> { ':' <ty> }
=end comment

    regex expr-nostruct-qmark              { <expr-nostruct> '?' }
    regex expr-nostruct-path-generic-tail  { <expr-nostruct> '.' <path-generic_args_with_colons> }
    regex expr-nostruct-lit-int-tail       { <expr-nostruct> '.' <lit-int> }
    regex expr-nostruct-bracket-index-tail { <expr-nostruct> '[' <maybe-expr> ']' }
    regex expr-nostruct-parens-tail        { <expr-nostruct> '(' <maybe-exprs> ')' }
    regex expr-nostruct-as-ty              { <expr-nostruct> <kw-as> <ty> }
    regex expr-nostruct-with-ty-ascription { <expr-nostruct> ':' <ty> }

    #---------------------------------
    proto regex expr-nostruct-assign { * }

    regex expr-nostruct-assign:sym<basic>   { <expr-nostruct> '='             <expr-nostruct> }
    regex expr-nostruct-assign:sym<shl>     { <expr-nostruct> <tok-shleq>     <expr-nostruct> }
    regex expr-nostruct-assign:sym<shr>     { <expr-nostruct> <tok-shreq>     <expr-nostruct> }
    regex expr-nostruct-assign:sym<minus>   { <expr-nostruct> <tok-minuseq>   <expr-nostruct> }
    regex expr-nostruct-assign:sym<and>     { <expr-nostruct> <tok-andeq>     <expr-nostruct> }
    regex expr-nostruct-assign:sym<or>      { <expr-nostruct> <tok-oreq>      <expr-nostruct> }
    regex expr-nostruct-assign:sym<plus>    { <expr-nostruct> <tok-pluseq>    <expr-nostruct> }
    regex expr-nostruct-assign:sym<star>    { <expr-nostruct> <tok-stareq>    <expr-nostruct> }
    regex expr-nostruct-assign:sym<slash>   { <expr-nostruct> <tok-slasheq>   <expr-nostruct> }
    regex expr-nostruct-assign:sym<caret>   { <expr-nostruct> <tok-careteq>   <expr-nostruct> }
    regex expr-nostruct-assign:sym<percent> { <expr-nostruct> <tok-percenteq> <expr-nostruct> }

    #---------------------------------
    proto regex expr-nostruct-binary { * }

    regex expr-nostruct-binary:sym<oror>   { <expr-nostruct> <tok-oror>   <expr-nostruct> }
    regex expr-nostruct-binary:sym<andand> { <expr-nostruct> <tok-andand> <expr-nostruct> }
    regex expr-nostruct-binary:sym<eqeq>   { <expr-nostruct> <tok-eqeq>   <expr-nostruct> }
    regex expr-nostruct-binary:sym<ne>     { <expr-nostruct> <tok-ne>     <expr-nostruct> }
    regex expr-nostruct-binary:sym<lt>     { <expr-nostruct> '<'          <expr-nostruct> }
    regex expr-nostruct-binary:sym<gt>     { <expr-nostruct> '>'          <expr-nostruct> }
    regex expr-nostruct-binary:sym<le>     { <expr-nostruct> <tok-le>     <expr-nostruct> }
    regex expr-nostruct-binary:sym<ge>     { <expr-nostruct> <tok-ge>     <expr-nostruct> }
    regex expr-nostruct-binary:sym<pipe>   { <expr-nostruct> '|'          <expr-nostruct> }
    regex expr-nostruct-binary:sym<caret>  { <expr-nostruct> '^'          <expr-nostruct> }
    regex expr-nostruct-binary:sym<and>    { <expr-nostruct> '&'          <expr-nostruct> }
    regex expr-nostruct-binary:sym<shl>    { <expr-nostruct> <tok-shl>    <expr-nostruct> }
    regex expr-nostruct-binary:sym<shr>    { <expr-nostruct> <tok-shr>    <expr-nostruct> }
    regex expr-nostruct-binary:sym<add>    { <expr-nostruct> '+'          <expr-nostruct> }
    regex expr-nostruct-binary:sym<sub>    { <expr-nostruct> '-'          <expr-nostruct> }
    regex expr-nostruct-binary:sym<mul>    { <expr-nostruct> '*'          <expr-nostruct> }
    regex expr-nostruct-binary:sym<div>    { <expr-nostruct> '/'          <expr-nostruct> }
    regex expr-nostruct-binary:sym<mod>    { <expr-nostruct> '%'          <expr-nostruct> }

    #------------------------
    regex expr-nostruct-range { <expr-nostruct>? <tok-dotdot> <expr-nostruct>? }

    proto regex expr-nostruct { * }

    regex expr-nostruct:sym<a>  { <lit> }
    regex expr-nostruct:sym<c>  { <kw-self> }
    regex expr-nostruct:sym<d>  { <macro-expr> }
    regex expr-nostruct:sym<e>  { <expr-nostruct-qmark> }
    regex expr-nostruct:sym<f>  { <expr-nostruct-path-generic-tail> }
    regex expr-nostruct:sym<g>  { <expr-nostruct-lit-int-tail> }
    regex expr-nostruct:sym<h>  { <expr-nostruct-bracket-index-tail> }
    regex expr-nostruct:sym<i>  { <expr-nostruct-parens-tail> }
    regex expr-nostruct:sym<j>  { '[' <vec-expr> ']' }
    regex expr-nostruct:sym<k>  { '(' <maybe-exprs> ')' }
    regex expr-nostruct:sym<m>  { <kw-continue> <ident>? }
    regex expr-nostruct:sym<o>  { <kw-return>   <expr>? }
    regex expr-nostruct:sym<q>  { <kw-break>    <ident>? }
    regex expr-nostruct:sym<s>  { <kw-yield>    <expr>? }
    regex expr-nostruct:sym<t>  { <expr-nostruct-assign> }
    regex expr-nostruct:sym<u>  { <expr-nostruct-binary> }
    regex expr-nostruct:sym<v>  { <expr-nostruct-range> }
    regex expr-nostruct:sym<ba> { <expr-nostruct-as-ty> }
    regex expr-nostruct:sym<bb> { <expr-nostruct-with-ty-ascription> }
    regex expr-nostruct:sym<bc> { <kw-box> <expr> }
    regex expr-nostruct:sym<bd> { <expr-qualified_path> }
    regex expr-nostruct:sym<be> { <block-expr> }
    regex expr-nostruct:sym<bf> { <block> }
    regex expr-nostruct:sym<bg> { <nonblock-prefix_expr_nostruct> }
    regex expr-nostruct:sym<b>  { <path-expr> } #{self.set-prec(IDENT)} 
}

our role ExprNoStruct::Actions {

=begin comment
    method expr-nostruct($/) {
        make ExprNoStruct.new(
            base => $<expr-nostruct-base>.made,
            tail => $<expr-nostruct-tail>>>.made,
            text => ~$/,
        )
    }

    method expr-nostruct-base:sym<lit>($/) {
        make ExprLit.new(
            lit  =>  $<lit>.made,
            text => ~$/,
        )
    }

    method expr-nostruct-base:sym<path-expr>($/) {
        make ExprPath.new(
            path-expr =>  $<path-expr>.made,
            text      => ~$/,
        )
    }

    method expr-nostruct-base:sym<self>($/) {
        make ExprPathSelf.new(
            text      => ~$/,
        )
    }

    method expr-nostruct-base:sym<macro-expr>($/) {
        make $<macro-expr>.made
    }

    method expr-nostruct-tail:sym<qmark>($/) {
        make ExprTry.new(
            text       => ~$/,
        )
    }

    method expr-nostruct-tail:sym<dot-path>($/) {
        make ExprField.new(
            path-generic-args-with-colons => $<path-generic-args-with-colons>.made,
            text                          => ~$/,
        )
    }

    method expr-nostruct-tail:sym<dot-lit-int>($/) {
        make ExprTupleIndex.new(
            lit-int => $<lit-int>.made,
            text    => ~$/,
        )
    }

    method expr-nostruct-tail:sym<brack-expr>($/) {
        make ExprIndex.new(
            maybe-expr => $<maybe-expr>.made,
            text       => ~$/,
        )
    }

    method expr-nostruct-base:sym<paren-expr>($/) {
        make ExprCall.new(
            maybe-exprs => $<maybe-exprs>.made,
            text        => ~$/,
        )
    }

    method expr-nostruct-base:sym<vec-expr>($/) {
        make ExprVec.new(
            vec-expr => $<vec-expr>.made,
            text     => ~$/,
        )
    }

    method expr-nostruct-tail:sym<paren-expr>($/) {
        make ExprParen.new(
            maybe-exprs => $<maybe-exprs>.made,
            text        => ~$/,
        )
    }

    method expr-nostruct-base:sym<again>($/) {
        make ExprAgain.new(
            ident => $<ident>.made,
            text  => ~$/,
        )
    }

    method expr-nostruct-base:sym<return>($/) {
        make ExprRet.new(
            text        => ~$/,
        )
    }

    method expr-nostruct-base:sym<return-expr>($/) {
        make ExprRet.new(
            expr =>  $<expr>.made,
            text => ~$/,
        )
    }

    method expr-nostruct-base:sym<break>($/) {
        make ExprBreak.new(
            text => ~$/,
        )
    }

    method expr-nostruct-base:sym<break-ident>($/) {
        make ExprBreak.new(
            ident =>  $<ident>.made,
            text  => ~$/,
        )
    }

    method expr-nostruct-base:sym<yield>($/) {
        make ExprYield.new(
            text  => ~$/,
        )
    }

    method expr-nostruct-base:sym<yield-expr>($/) {
        make ExprYield.new(
            expr =>  $<expr>.made,
            text => ~$/,
        )
    }

    method expr-nostruct-tail:sym<eq-expr>($/) {
        make ExprAssign.new(
            expr-nostruct => $<expr-nostruct>.made,
            text          => ~$/,
        )
    }

    method expr-nostruct-tail:sym<shleq-expr>($/) {
        make ExprAssignShl.new(
            expr-nostruct =>  $<expr-nostruct>.made,
            text          => ~$/,
        )
    }

    method expr-nostruct-tail:sym<shreq-expr>($/) {
        make ExprAssignShr.new(
            expr-nostruct =>  $<expr-nostruct>.made,
            text          => ~$/,
        )
    }

    method expr-nostruct-tail:sym<minuseq-expr>($/) {
        make ExprAssignSub.new(
            expr-nostruct =>  $<expr-nostruct>.made,
            text          => ~$/,
        )
    }

    method expr-nostruct-tail:sym<andeq-expr>($/) {
        make ExprAssignBitAnd.new(
            expr-nostruct =>  $<expr-nostruct>.made,
            text          => ~$/,
        )
    }

    method expr-nostruct-tail:sym<oreq-expr>($/) {
        make ExprAssignBitOr.new(
            expr-nostruct =>  $<expr-nostruct>.made,
            text          => ~$/,
        )
    }

    method expr-nostruct-tail:sym<pluseq-expr>($/) {
        make ExprAssignAdd.new(
            expr => $<expr-nostruct>.made,
            text => ~$/,
        )
    }

    method expr-nostruct-tail:sym<stareq-expr>($/) {
        make ExprAssignMul.new(
            expr-nostruct =>  $<expr-nostruct>.made,
            text          => ~$/,
        )
    }

    method expr-nostruct-tail:sym<slasheq-expr>($/) {
        make ExprAssignDiv.new(
            expr-nostruct =>  $<expr-nostruct>.made,
            text          => ~$/,
        )
    }

    method expr-nostruct-tail:sym<careteq-expr>($/) {
        make ExprAssignBitXor.new(
            expr-nostruct =>  $<expr-nostruct>.made,
            text          => ~$/,
        )
    }

    method expr-nostruct-tail:sym<percenteq-expr>($/) {
        make ExprAssignRem.new(
            expr-nostruct =>  $<expr-nostruct>.made,
            text          => ~$/,
        )
    }

    method expr-nostruct-tail:sym<oror-expr>($/) {
        make ExprOrOr.new(
            expr => $<expr>.made,
            text => ~$/,
        )
    }

    method expr-nostruct-tail:sym<andand-expr>($/) {
        make ExprAndAnd.new(
            expr => $<expr-nostruct>.made,
            text => ~$/,
        )
    }

    method expr-nostruct-tail:sym<eqeq-expr>($/) {
        make ExprEqEq.new(
            expr => $<expr-nostruct>.made,
            text => ~$/,
        )
    }

    method expr-nostruct-tail:sym<ne-expr>($/) {
        make ExprNe.new(
            expr => $<expr-nostruct>.made,
            text => ~$/,
        )
    }

    method expr-nostruct-tail:sym<lt-expr>($/) {
        make ExprLt.new(
            expr => $<expr-nostruct>.made,
            text => ~$/,
        )
    }

    method expr-nostruct-tail:sym<gt-expr>($/) {
        make ExprGt.new(
            expr => $<expr-nostruct>.made,
            text => ~$/,
        )
    }

    method expr-nostruct-tail:sym<le-expr>($/) {
        make ExprLe.new(
            expr => $<expr-nostruct>.made,
            text => ~$/,
        )
    }

    method expr-nostruct-tai:sym<ge-expr>($/) {
        make ExprGe.new(
            expr => $<expr-nostruct>.made,
            text => ~$/,
        )
    }

    method expr-nostruct-tail:sym<pipe-expr>($/) {
        make ExprPipe.new(
            expr => $<expr-nostruct>.made,
            text => ~$/,
        )
    }

    method expr-nostruct-tail:sym<caret-expr>($/) {
        make ExprCaret.new(
            expr => $<expr-nostruct>.made,
            text => ~$/,
        )
    }

    method expr-nostruct-tail:sym<amp-expr>($/) {
        make ExprAmp.new(
            expr => $<expr-nostruct>.made,
            text => ~$/,
        )
    }

    method expr-nostruct-tail:sym<shl-expr>($/) {
        make ExprShl.new(
            expr => $<expr-nostruct>.made,
            text => ~$/,
        )
    }

    method expr-nostruct-tail:sym<shr-expr>($/) {
        make ExprShl.new(
            expr => $<expr-nostruct>.made,
            text => ~$/,
        )
    }

    method expr-nostruct-tail:sym<plus-expr>($/) {
        make ExprPlus.new(
            expr => $<expr-nostruct>.made,
            text => ~$/,
        )
    }

    method expr-nostruct-tail:sym<minus-expr>($/) {
        make ExprMinus.new(
            expr => $<expr-nostruct>.made,
            text => ~$/,
        )
    }

    method expr-nostruct-tail:sym<star-expr>($/) {
        make ExprStar.new(
            expr => $<expr-nostruct>.made,
            text => ~$/,
        )
    }

    method expr-nostruct-tail:sym<slash-expr>($/) {
        make ExprSlash.new(
            expr => $<expr-nostruct>.made,
            text => ~$/,
        )
    }

    method expr-nostruct-tail:sym<mod-expr>($/) {
        make ExprMod.new(
            expr => $<expr-nostruct>.made,
            text => ~$/,
        )
    }

    method expr-nostruct-base:sym<dotdot>($/) {
        make ExprRange.new(
            text          => ~$/,
        )
    }

    method expr-nostruct-tail:sym<dotdot-nostruct>($/) {
        make ExprRange.new(
            expr => $<expr-nostruct>.made,
            text => ~$/,
        )
    }

    method expr-nostruct-base:sym<dotdot-expr-nostruct>($/) {
        make ExprRange.new(
            expr => $<expr-nostruct>.made,
            text => ~$/,
        )
    }

    method expr-nostruct-tail:sym<dotdot>($/) {
        make ExprRange.new(
            text          => ~$/,
        )
    }

    method expr-nostruct-tail:sym<as-try>($/) {
        make ExprCast.new(
            ty   =>  $<ty>.made,
            text          => ~$/,
        )
    }

    method expr-nostruct-tail:sym<colon-try>($/) {
        make ExprTypeAscr.new(
            ty   =>  $<ty>.made,
            text          => ~$/,
        )
    }

    method expr-nostruct-base:sym<box-expr>($/) {
        make ExprBox.new(
            expr =>  $<expr>.made,
            text          => ~$/,
        )
    }

    method expr-nostruct-base:sym<expr-qualified-path>($/) {
        make $<expr-qualified-path>.made
    }

    method expr-nostruct-base:sym<block-expr>($/) {
        make $<block-expr>.made
    }

    method expr-nostruct-base:sym<block>($/) {
        make $<block>.made
    }

    method expr-nostruct-base:sym<nonblock-prefix-expr-nostruct>($/) {
        make $<nonblock-prefix-expr-nostruct>.made
    }
=end comment
}

