use Data::Dump::Tree;

use grust-model;
use grust-model-expr;

our role ExprNoStruct::Rules {

    #--------------------------------
    rule expr-nostruct { <expr-nostruct-root> <tok-qmark>* }

    #--------------------------------
    proto rule expr-nostruct-root { * }
    rule expr-nostruct-root:sym<a>  { {say "expr-nostruct-root:sym<a>" } <lit> }
    rule expr-nostruct-root:sym<c>  { {say "expr-nostruct-root:sym<c>" } <kw-self> }
    rule expr-nostruct-root:sym<d>  { {say "expr-nostruct-root:sym<d>" } <macro-expr> }
    rule expr-nostruct-root:sym<f>  { {say "expr-nostruct-root:sym<f>" } <expr-nostruct-dot-path> }

    #--------------------------------
    rule expr-nostruct-dot-path    { {say "expr-nostruct-dot-path" } <expr-nostruct-dot-lit-int> ["." <path-generic-args-with-colons>]* }
    rule expr-nostruct-dot-lit-int { {say "expr-nostruct-dot-lit-int" } <expr-nostruct-brack-index> ["." <lit-int>]* }
    rule expr-nostruct-brack-index { {say "expr-nostruct-brack-index" } <expr-nostruct-call>        ['[' <maybe-expr> ']']* }
    rule expr-nostruct-call        { {say "expr-nostruct-call" } <expr-nostruct-basic>       ['(' <maybe-exprs> ')']* }

    #--------------------------------
    proto rule expr-nostruct-basic { * }

    rule expr-nostruct-basic:sym<j> { {say "expr-nostruct-basic:sym<j>" } '[' <vec-expr> ']' }
    rule expr-nostruct-basic:sym<k> { {say "expr-nostruct-basic:sym<k>" } '(' <maybe-exprs> ')' }
    rule expr-nostruct-basic:sym<m> { {say "expr-nostruct-basic:sym<m>" } <kw-continue> <ident>? }
    rule expr-nostruct-basic:sym<o> { {say "expr-nostruct-basic:sym<o>" } <kw-return>   <expr>? }
    rule expr-nostruct-basic:sym<q> { {say "expr-nostruct-basic:sym<q>" } <kw-break>    <ident>? }
    rule expr-nostruct-basic:sym<s> { {say "expr-nostruct-basic:sym<s>" } <kw-yield>    <expr>? }
    rule expr-nostruct-basic:sym<t> { {say "expr-nostruct-basic:sym<t>" } <expr-nostruct-assign> }

    #--------------------------------
    rule expr-nostruct-assign        { {say "expr-nostruct-assign" } <expr-nostruct-assign-shleq>        ["=" <expr-nostruct-assign-shleq>]? }
    rule expr-nostruct-assign-shleq  { {say "expr-nostruct-assign-shleq" } <expr-nostruct-assign-shreq>  [<tok-shleq>     <expr-nostruct-assign-shreq>]? }
    rule expr-nostruct-assign-shreq  { {say "expr-nostruct-assign-shreq" } <expr-nostruct-minuseq>       [<tok-shreq>     <expr-nostruct-minuseq>]? }
    rule expr-nostruct-minuseq       { {say "expr-nostruct-minuseq" } <expr-nostruct-andeq>              [<tok-minuseq>   <expr-nostruct-andeq>]? }
    rule expr-nostruct-andeq         { {say "expr-nostruct-andeq" } <expr-nostruct-oreq>                 [<tok-andeq>     <expr-nostruct-oreq>]? }
    rule expr-nostruct-oreq          { {say "expr-nostruct-oreq" } <expr-nostruct-pluseq>                [<tok-oreq>      <expr-nostruct-pluseq>]? }
    rule expr-nostruct-pluseq        { {say "expr-nostruct-pluseq" } <expr-nostruct-stareq>              [<tok-pluseq>    <expr-nostruct-stareq>]? }
    rule expr-nostruct-stareq        { {say "expr-nostruct-stareq" } <expr-nostruct-slasheq>             [<tok-stareq>    <expr-nostruct-slasheq>]? }
    rule expr-nostruct-slasheq       { {say "expr-nostruct-slasheq" } <expr-nostruct-careteq>            [<tok-slasheq>   <expr-nostruct-careteq>]? }
    rule expr-nostruct-careteq       { {say "expr-nostruct-careteq" } <expr-nostruct-percenteq>          [<tok-careteq>   <expr-nostruct-percenteq>]? }
    rule expr-nostruct-percenteq     { {say "expr-nostruct-percenteq" } <expr-nostruct-oror>             [<tok-percenteq> <expr-nostruct-oror>]? }
    rule expr-nostruct-oror          { {say "expr-nostruct-oror" } <expr-nostruct-andand>                [<tok-oror>      <expr-nostruct-andand>]? }
    rule expr-nostruct-andand        { {say "expr-nostruct-andand" } <expr-nostruct-eqeq>                [<tok-andand>    <expr-nostruct-eqeq>]? }
    rule expr-nostruct-eqeq          { {say "expr-nostruct-eqeq" } <expr-nostruct-ne>                    [<tok-eqeq>      <expr-nostruct-ne>]? }
    rule expr-nostruct-ne            { {say "expr-nostruct-ne" } <expr-nostruct-lt>                      [<tok-ne>        <expr-nostruct-lt>]? }
    rule expr-nostruct-lt            { {say "expr-nostruct-lt" } <expr-nostruct-gt>                      ['<'             <expr-nostruct-gt>]? }
    rule expr-nostruct-gt            { {say "expr-nostruct-gt" } <expr-nostruct-le>                      ['>'             <expr-nostruct-le>]? }
    rule expr-nostruct-le            { {say "expr-nostruct-le" } <expr-nostruct-ge>                      [<tok-le>        <expr-nostruct-ge>]? }
    rule expr-nostruct-ge            { {say "expr-nostruct-ge" } <expr-nostruct-pipe>                    [<tok-ge>        <expr-nostruct-pipe>]? }
    rule expr-nostruct-pipe          { {say "expr-nostruct-pipe" } <expr-nostruct-caret>                 ['|'             <expr-nostruct-caret>]? }
    rule expr-nostruct-caret         { {say "expr-nostruct-caret" } <expr-nostruct-and>                  ['^'             <expr-nostruct-and>]? }
    rule expr-nostruct-and           { {say "expr-nostruct-and" } <expr-nostruct-shl>                    ['&'             <expr-nostruct-shl>]? }
    rule expr-nostruct-shl           { {say "expr-nostruct-shl" } <expr-nostruct-shr>                    [<tok-shl>       <expr-nostruct-shr>]? }
    rule expr-nostruct-shr           { {say "expr-nostruct-shr" } <expr-nostruct-add>                    [<tok-shr>       <expr-nostruct-add>]? }
    rule expr-nostruct-add           { {say "expr-nostruct-add" } <expr-nostruct-sub>                    ['+'             <expr-nostruct-sub>]? }
    rule expr-nostruct-sub           { {say "expr-nostruct-sub" } <expr-nostruct-mul>                    ['-'             <expr-nostruct-mul>]? }
    rule expr-nostruct-mul           { {say "expr-nostruct-mul" } <expr-nostruct-div>                    ['*'             <expr-nostruct-div>]? }
    rule expr-nostruct-div           { {say "expr-nostruct-div" } <expr-nostruct-mod>                    ['/'             <expr-nostruct-mod>]? }
    rule expr-nostruct-mod           { {say "expr-nostruct-mod" } <expr-nostruct-tight>                  ['%'             <expr-nostruct-tight>]? }

    #-----------------------
    proto rule expr-nostruct-range               { * }
    rule expr-nostruct-range:sym<a>              { {say "expr-nostruct-range:sym<a>" } <tok-dotdot> }
    rule expr-nostruct-range:sym<b>              { {say "expr-nostruct-range:sym<b>" } <tok-dotdot> <expr-nostruct-tighter> }
    rule expr-nostruct-range:sym<c>              { {say "expr-nostruct-range:sym<c>" } <expr-nostruct-tighter> <tok-dotdot> }
    rule expr-nostruct-range:sym<d>              { {say "expr-nostruct-range:sym<d>" } <expr-nostruct-tighter> <tok-dotdot> <expr-nostruct-tighter> }

    #-----------------------
    proto rule expr-nostruct-tight               { * }
    rule expr-nostruct-tight:sym<range>          { {say "expr-nostruct-tight:sym<range>" } <expr-nostruct-range> }
    rule expr-nostruct-tight:sym<tighter>        { {say "expr-nostruct-tight:sym<tighter>" } <expr-nostruct-tighter> }

    rule expr-nostruct-tighter                   { {say "expr-nostruct-tighter" } <expr-nostruct-even-tighter> [<kw-as> <ty>]? }
    rule expr-nostruct-even-tighter              { {say "expr-nostruct-even-tighter" } <expr-nostruct-tightest> [':' <ty>]? }

    proto rule expr-nostruct-tightest { * }

    rule expr-nostruct-tightest:sym<bc> { {say "expr-nostruct-tightest:sym<bc>" } <kw-box> <expr> }
    rule expr-nostruct-tightest:sym<bd> { {say "expr-nostruct-tightest:sym<bd>" } <expr-qualified-path> }
    rule expr-nostruct-tightest:sym<be> { {say "expr-nostruct-tightest:sym<be>" } <block-expr> }
    rule expr-nostruct-tightest:sym<bf> { {say "expr-nostruct-tightest:sym<bf>" } <block> }
    rule expr-nostruct-tightest:sym<bg> { {say "expr-nostruct-tightest:sym<bg>" } <nonblock-prefix-expr-nostruct> }
    rule expr-nostruct-tightest:sym<b>  { {say "expr-nostruct-tightest:sym<b>"  } <path-expr> } #{self.set-prec(IDENT)} 
}

our role ExprNoStruct::Actions {}

