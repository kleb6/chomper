use Chomper::Cpp::GcppAbstractDeclarator;
use Chomper::Cpp::GcppAccess;
use Chomper::Cpp::GcppAdditiveExpression;
use Chomper::Cpp::GcppAlign;
use Chomper::Cpp::GcppAndExpression;
use Chomper::Cpp::GcppAsm;
use Chomper::Cpp::GcppAssignment;
use Chomper::Cpp::GcppAttr;
use Chomper::Cpp::GcppAttributedStatement;
use Chomper::Cpp::GcppBalanced;
use Chomper::Cpp::GcppBase;
use Chomper::Cpp::GcppBin;
use Chomper::Cpp::GcppBool;
use Chomper::Cpp::GcppCastExpression;
use Chomper::Cpp::GcppChar;
use Chomper::Cpp::GcppClassOrDecltype;
use Chomper::Cpp::GcppClass;
use Chomper::Cpp::GcppComment;
use Chomper::Cpp::GcppCondition;
use Chomper::Cpp::GcppConditionalExpression;
use Chomper::Cpp::GcppConstructor;
use Chomper::Cpp::GcppConversion;
use Chomper::Cpp::GcppCv;
use Chomper::Cpp::GcppDec;
use Chomper::Cpp::GcppDeclSpecifier;
use Chomper::Cpp::GcppDeclaration;
use Chomper::Cpp::GcppDeclarator;
use Chomper::Cpp::GcppDecltype;
use Chomper::Cpp::GcppDeleteExpression;
use Chomper::Cpp::GcppElaboratedTypeSpecifier;
use Chomper::Cpp::GcppEncoding;
use Chomper::Cpp::GcppEnum;
use Chomper::Cpp::GcppEqExpression;
use Chomper::Cpp::GcppEscape;
use Chomper::Cpp::GcppException;
use Chomper::Cpp::GcppExpression;
use Chomper::Cpp::GcppFloat;
use Chomper::Cpp::GcppForInit;
use Chomper::Cpp::GcppForRange;
use Chomper::Cpp::GcppFunction;
use Chomper::Cpp::GcppHex;
use Chomper::Cpp::GcppIdExpression;
use Chomper::Cpp::GcppIdent;
use Chomper::Cpp::GcppInstantiate;
use Chomper::Cpp::GcppIntegerLiteral;
use Chomper::Cpp::GcppIteration;
use Chomper::Cpp::GcppJumpStatement;
use Chomper::Cpp::GcppLabeledStatement;
use Chomper::Cpp::GcppLambda;
use Chomper::Cpp::GcppLinkage;
use Chomper::Cpp::GcppLiteral;
use Chomper::Cpp::GcppLogicalExpression;
use Chomper::Cpp::GcppMacro;
use Chomper::Cpp::GcppMemInitializer;
use Chomper::Cpp::GcppMember;
use Chomper::Cpp::GcppMultiplicativeExpression;
use Chomper::Cpp::GcppNamespace;
use Chomper::Cpp::GcppNestedName;
use Chomper::Cpp::GcppNew;
use Chomper::Cpp::GcppNoPtr;
use Chomper::Cpp::GcppNoexcept;
use Chomper::Cpp::GcppOct;
use Chomper::Cpp::GcppOperatorId;
use Chomper::Cpp::GcppOperator;
use Chomper::Cpp::GcppOrExpression;
use Chomper::Cpp::GcppParam;
use Chomper::Cpp::GcppPostfixExpression;
use Chomper::Cpp::GcppPrimaryExpression;
use Chomper::Cpp::GcppPseudoDtor;
use Chomper::Cpp::GcppPtrDeclarator;
use Chomper::Cpp::GcppPtrMember;
use Chomper::Cpp::GcppPtrOperator;
use Chomper::Cpp::GcppPtr;
use Chomper::Cpp::GcppPure;
use Chomper::Cpp::GcppRef;
use Chomper::Cpp::GcppRelationalExpression;
use Chomper::Cpp::GcppReturnStatement;
use Chomper::Cpp::GcppSelection;
use Chomper::Cpp::GcppShiftExpression;
use Chomper::Cpp::GcppSpecialize;
use Chomper::Cpp::GcppStatement;
use Chomper::Cpp::GcppStorageClass;
use Chomper::Cpp::GcppStr;
use Chomper::Cpp::GcppSuffix;
use Chomper::Cpp::GcppTemplate;
use Chomper::Cpp::GcppTranslationUnit;
use Chomper::Cpp::GcppTry;
use Chomper::Cpp::GcppTypeId;
use Chomper::Cpp::GcppTypeModifier;
use Chomper::Cpp::GcppTypeName;
use Chomper::Cpp::GcppTypeParam;
use Chomper::Cpp::GcppTypeSpecifier;
use Chomper::Cpp::GcppTypedef;
use Chomper::Cpp::GcppUnaryExpression;
use Chomper::Cpp::GcppUserDefinedLiteral;
use Chomper::Cpp::GcppUsingDirective;
use Chomper::Cpp::GcppVirtual;

our class Cpp::Actions
does AbstractDeclarator::Actions
does Access::Actions
does AdditiveExpression::Actions
does Align::Actions
does AndExpression::Actions
does Asm::Actions
does AssignmentExpression::Actions
does AttributeSpecifierSeq::Actions
does AttributedStatement::Actions
does Balanced::Actions
does Base::Actions
does Bin::Actions
does BooleanLiteral::Actions
does CV::Actions
does CastExpression::Actions
does CharacterLiteral::Actions
does Class::Actions
does ClassOrDeclType::Actions
does Comment::Actions
does Condition::Actions
does ConditionalExpression::Actions
does Constructor::Actions
does Conversion::Actions
does Dec::Actions
does DeclSpecifier::Actions
does Declaration::Actions
does Declarator::Actions
does Decltype::Actions
does DeleteExpression::Actions
does ElaboratedTypeSpecifier::Actions
does Encoding::Actions
does Enum::Actions
does EqualityExpression::Actions
does Escape::Actions
does Exception::Actions
does Expression::Actions
does FloatingLiteral::Actions
does ForInitStatement::Actions
does ForRange::Actions
does Function::Actions
does Hex::Actions
does IdExpression::Actions
does Identifier::Actions
does Instantiation::Actions
does IntegerLiteral::Actions
does IterationStatement::Actions
does JumpStatement::Actions
does LabeledStatement::Actions
does LambdaExpression::Actions
does Linkage::Actions
does Literal::Actions
does LogicalExpression::Actions
does MemInitializer::Actions
does Member::Actions
does Typedef::Actions
does MultiLineMacro::Actions
does MultiplicativeExpression::Actions
does Namespace::Actions
does NestedNameSpecifier::Actions
does NewExpression::Actions
does NoExceptExpression::Actions
does NoPointerDeclarator::Actions
does Oct::Actions
does Operator::Actions
does OperatorId::Actions
does OrExpression::Actions
does Parameters::Actions
does PointerDeclarator::Actions
does PointerLiteral::Actions
does PointerMember::Actions
does PointerOperator::Actions
does PostfixExpression::Actions
does PrimaryExpression::Actions
does PseudoDestructorName::Actions
does Pure::Actions
does Ref::Actions
does RelationalExpression::Actions
does ReturnStatement::Actions
does SelectionStatement::Actions
does ShiftExpression::Actions
does Specialize::Actions
does Statement::Actions
does StorageClass::Actions
does StringLiteral::Actions
does Suffix::Actions
does Template::Actions
does TranslationUnit::Actions
does Try::Actions
does TypeId::Actions
does TypeModifier::Actions
does TypeName::Actions
does TypeParameter::Actions
does TypeSpecifier::Actions
does Typedef::Actions
does UnaryExpression::Actions
does UserDefinedLiteral::Actions
does UsingDirective::Actions
does Virtual::Actions
{
    method semi($/) {
        make $<comment>.made
    }

    # rule TOP { <.ws> <statement-seq> }
    method TOP($/) {
        make $<statement-seq>.made
    }
}

