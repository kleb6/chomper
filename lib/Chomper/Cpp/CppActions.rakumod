unit module Chomper::Cpp::CppActions;

use Chomper::Cpp::GcppAbstractDeclarator;
use Chomper::Cpp::GcppAccess;
use Chomper::Cpp::GcppAdditiveExpression;
use Chomper::Cpp::GcppAlign;
use Chomper::Cpp::GcppAndExpression;
use Chomper::Cpp::GcppAsm;
use Chomper::Cpp::GcppAssignment;
use Chomper::Cpp::GcppAttr;
use Chomper::Cpp::GcppAttributedStatement;
use Chomper::Cpp::GcppBalanced;
use Chomper::Cpp::GcppBase;
use Chomper::Cpp::GcppBin;
use Chomper::Cpp::GcppBool;
use Chomper::Cpp::GcppCastExpression;
use Chomper::Cpp::GcppChar;
use Chomper::Cpp::GcppClassOrDecltype;
use Chomper::Cpp::GcppClass;
use Chomper::Cpp::GcppComment;
use Chomper::Cpp::GcppCondition;
use Chomper::Cpp::GcppConditionalExpression;
use Chomper::Cpp::GcppConstructor;
use Chomper::Cpp::GcppConversion;
use Chomper::Cpp::GcppCv;
use Chomper::Cpp::GcppDec;
use Chomper::Cpp::GcppDeclSpecifier;
use Chomper::Cpp::GcppDeclaration;
use Chomper::Cpp::GcppDeclarator;
use Chomper::Cpp::GcppDecltype;
use Chomper::Cpp::GcppDeleteExpression;
use Chomper::Cpp::GcppElaboratedTypeSpecifier;
use Chomper::Cpp::GcppEncoding;
use Chomper::Cpp::GcppEnum;
use Chomper::Cpp::GcppEqExpression;
use Chomper::Cpp::GcppEscape;
use Chomper::Cpp::GcppException;
use Chomper::Cpp::GcppExpression;
use Chomper::Cpp::GcppFloat;
use Chomper::Cpp::GcppForInit;
use Chomper::Cpp::GcppForRange;
use Chomper::Cpp::GcppFunction;
use Chomper::Cpp::GcppHex;
use Chomper::Cpp::GcppIdExpression;
use Chomper::Cpp::GcppIdent;
use Chomper::Cpp::GcppInstantiate;
use Chomper::Cpp::GcppIntegerLiteral;
use Chomper::Cpp::GcppIteration;
use Chomper::Cpp::GcppJumpStatement;
use Chomper::Cpp::GcppLabeledStatement;
use Chomper::Cpp::GcppLambda;
use Chomper::Cpp::GcppLinkage;
use Chomper::Cpp::GcppLiteral;
use Chomper::Cpp::GcppLogicalExpression;
use Chomper::Cpp::GcppMacro;
use Chomper::Cpp::GcppMemInitializer;
use Chomper::Cpp::GcppMember;
use Chomper::Cpp::GcppMultiplicativeExpression;
use Chomper::Cpp::GcppNamespace;
use Chomper::Cpp::GcppNestedName;
use Chomper::Cpp::GcppNew;
use Chomper::Cpp::GcppNoPtr;
use Chomper::Cpp::GcppNoexcept;
use Chomper::Cpp::GcppOct;
use Chomper::Cpp::GcppOperatorId;
use Chomper::Cpp::GcppOperator;
use Chomper::Cpp::GcppOrExpression;
use Chomper::Cpp::GcppParam;
use Chomper::Cpp::GcppPostfixExpression;
use Chomper::Cpp::GcppPrimaryExpression;
use Chomper::Cpp::GcppPseudoDtor;
use Chomper::Cpp::GcppPtrDeclarator;
use Chomper::Cpp::GcppPtrMember;
use Chomper::Cpp::GcppPtrOperator;
use Chomper::Cpp::GcppPtr;
use Chomper::Cpp::GcppPure;
use Chomper::Cpp::GcppRef;
use Chomper::Cpp::GcppRelationalExpression;
use Chomper::Cpp::GcppReturnStatement;
use Chomper::Cpp::GcppSelection;
use Chomper::Cpp::GcppShiftExpression;
use Chomper::Cpp::GcppSpecialize;
use Chomper::Cpp::GcppStatement;
use Chomper::Cpp::GcppStorageClass;
use Chomper::Cpp::GcppStr;
use Chomper::Cpp::GcppSuffix;
use Chomper::Cpp::GcppTemplate;
use Chomper::Cpp::GcppTranslationUnit;
use Chomper::Cpp::GcppTry;
use Chomper::Cpp::GcppTypeId;
use Chomper::Cpp::GcppTypeModifier;
use Chomper::Cpp::GcppTypeName;
use Chomper::Cpp::GcppTypeParam;
use Chomper::Cpp::GcppTypeSpecifier;
use Chomper::Cpp::GcppTypedef;
use Chomper::Cpp::GcppUnaryExpression;
use Chomper::Cpp::GcppUserDefinedLiteral;
use Chomper::Cpp::GcppUsingDirective;
use Chomper::Cpp::GcppVirtual;

our class CppActions
does AbstractDeclaratorGrammar::Actions
does AccessGrammar::Actions
does AdditiveExpressionGrammar::Actions
does AlignGrammar::Actions
does AndExpressionGrammar::Actions
does AsmGrammar::Actions
does AssignmentExpressionGrammar::Actions
does AttributeSpecifierSeqGrammar::Actions
does AttributedStatementGrammar::Actions
does BalancedGrammar::Actions
does BaseGrammar::Actions
does BinGrammar::Actions
does BooleanLiteralGrammar::Actions
does CVGrammar::Actions
does CastExpressionGrammar::Actions
does CharacterLiteralGrammar::Actions
does ClassGrammar::Actions
does ClassOrDeclTypeGrammar::Actions
does CommentGrammar::Actions
does ConditionGrammar::Actions
does ConditionalExpressionGrammar::Actions
does ConstructorGrammar::Actions
does ConversionGrammar::Actions
does DecGrammar::Actions
does DeclSpecifierGrammar::Actions
does DeclarationGrammar::Actions
does DeclaratorGrammar::Actions
does DecltypeGrammar::Actions
does DeleteExpressionGrammar::Actions
does ElaboratedTypeSpecifierGrammar::Actions
does EncodingGrammar::Actions
does EnumGrammar::Actions
does EqualityExpressionGrammar::Actions
does EscapeGrammar::Actions
does ExceptionGrammar::Actions
does ExpressionGrammar::Actions
does FloatingLiteralGrammar::Actions
does ForInitStatementGrammar::Actions
does ForRangeGrammar::Actions
does FunctionGrammar::Actions
does HexGrammar::Actions
does IdExpressionGrammar::Actions
does IdentifierGrammar::Actions
does InstantiationGrammar::Actions
does IntegerLiteralGrammar::Actions
does IterationStatementGrammar::Actions
does JumpStatementGrammar::Actions
does LabeledStatementGrammar::Actions
does LambdaExpressionGrammar::Actions
does LinkageGrammar::Actions
does LiteralGrammar::Actions
does LogicalExpressionGrammar::Actions
does MemInitializerGrammar::Actions
does MemberGrammar::Actions
does TypedefGrammar::Actions
does MultiLineMacroGrammar::Actions
does MultiplicativeExpressionGrammar::Actions
does NamespaceGrammar::Actions
does NestedNameSpecifierGrammar::Actions
does NewExpressionGrammar::Actions
does NoExceptExpressionGrammar::Actions
does NoPointerDeclaratorGrammar::Actions
does OctGrammar::Actions
does OperatorGrammar::Actions
does OperatorIdGrammar::Actions
does OrExpressionGrammar::Actions
does ParametersGrammar::Actions
does PointerDeclaratorGrammar::Actions
does PointerLiteralGrammar::Actions
does PointerMemberGrammar::Actions
does PointerOperatorGrammar::Actions
does PostfixExpressionGrammar::Actions
does PrimaryExpressionGrammar::Actions
does PseudoDestructorNameGrammar::Actions
does PureGrammar::Actions
does RefGrammar::Actions
does RelationalExpressionGrammar::Actions
does ReturnStatementGrammar::Actions
does SelectionStatementGrammar::Actions
does ShiftExpressionGrammar::Actions
does SpecializeGrammar::Actions
does StatementGrammar::Actions
does StorageClassGrammar::Actions
does StringLiteralGrammar::Actions
does SuffixGrammar::Actions
does TemplateGrammar::Actions
does TranslationUnitGrammar::Actions
does TryGrammar::Actions
does TypeIdGrammar::Actions
does TypeModifierGrammar::Actions
does TypeNameGrammar::Actions
does TypeParameterGrammar::Actions
does TypeSpecifierGrammar::Actions
does TypedefGrammar::Actions
does UnaryExpressionGrammar::Actions
does UserDefinedLiteralGrammar::Actions
does UsingDirectiveGrammar::Actions
does VirtualGrammar::Actions
is export
{
    method semi($/) {
        make $<comment>.made
    }

    # rule TOP { <.ws> <statement-seq> }
    method TOP($/) {
        make $<statement-seq>.made
    }
}

