unit module Chomper::Cpp::Gcpp;

use Grammar::Tracer;

use Chomper::Cpp::GcppAbstractDeclarator;
use Chomper::Cpp::GcppAccess;
use Chomper::Cpp::GcppAdditiveExpression;
use Chomper::Cpp::GcppAlign;
use Chomper::Cpp::GcppAndExpression;
use Chomper::Cpp::GcppAsm;
use Chomper::Cpp::GcppAssignment;
use Chomper::Cpp::GcppAttr;
use Chomper::Cpp::GcppAttributedStatement;
use Chomper::Cpp::GcppBalanced;
use Chomper::Cpp::GcppBase;
use Chomper::Cpp::GcppBin;
use Chomper::Cpp::GcppBool;
use Chomper::Cpp::GcppCastExpression;
use Chomper::Cpp::GcppChar;
use Chomper::Cpp::GcppClassOrDecltype;
use Chomper::Cpp::GcppClass;
use Chomper::Cpp::GcppComment;
use Chomper::Cpp::GcppCondition;
use Chomper::Cpp::GcppConditionalExpression;
use Chomper::Cpp::GcppConstructor;
use Chomper::Cpp::GcppConversion;
use Chomper::Cpp::GcppCv;
use Chomper::Cpp::GcppDec;
use Chomper::Cpp::GcppDeclSpecifier;
use Chomper::Cpp::GcppDeclaration;
use Chomper::Cpp::GcppDeclarator;
use Chomper::Cpp::GcppDeleteExpression;
use Chomper::Cpp::GcppElaboratedTypeSpecifier;
use Chomper::Cpp::GcppEncoding;
use Chomper::Cpp::GcppEnum;
use Chomper::Cpp::GcppEqExpression;
use Chomper::Cpp::GcppEscape;
use Chomper::Cpp::GcppException;
use Chomper::Cpp::GcppExpression;
use Chomper::Cpp::GcppFloat;
use Chomper::Cpp::GcppForInit;
use Chomper::Cpp::GcppForRange;
use Chomper::Cpp::GcppFunction;
use Chomper::Cpp::GcppHex;
use Chomper::Cpp::GcppIdExpression;
use Chomper::Cpp::GcppIdent;
use Chomper::Cpp::GcppInstantiate;
use Chomper::Cpp::GcppIntegerLiteral;
use Chomper::Cpp::GcppIteration;
use Chomper::Cpp::GcppJumpStatement;
use Chomper::Cpp::GcppKeywords;
use Chomper::Cpp::GcppLabeledStatement;
use Chomper::Cpp::GcppLambda;
use Chomper::Cpp::GcppLinkage;
use Chomper::Cpp::GcppLiteral;
use Chomper::Cpp::GcppLogicalExpression;
use Chomper::Cpp::GcppMacro;
use Chomper::Cpp::GcppMemInitializer;
use Chomper::Cpp::GcppMember;
use Chomper::Cpp::GcppMultiplicativeExpression;
use Chomper::Cpp::GcppNamespace;
use Chomper::Cpp::GcppNestedName;
use Chomper::Cpp::GcppNew;
use Chomper::Cpp::GcppNoPtr;
use Chomper::Cpp::GcppNoexcept;
use Chomper::Cpp::GcppOct;
use Chomper::Cpp::GcppOperatorId;
use Chomper::Cpp::GcppOperator;
use Chomper::Cpp::GcppOrExpression;
use Chomper::Cpp::GcppParam;
use Chomper::Cpp::GcppPostfixExpression;
use Chomper::Cpp::GcppPrimaryExpression;
use Chomper::Cpp::GcppPseudoDtor;
use Chomper::Cpp::GcppPtrDeclarator;
use Chomper::Cpp::GcppPtrMember;
use Chomper::Cpp::GcppPtrOperator;
use Chomper::Cpp::GcppPtr;
use Chomper::Cpp::GcppPunctuation;
use Chomper::Cpp::GcppPure;
use Chomper::Cpp::GcppRef;
use Chomper::Cpp::GcppRelationalExpression;
use Chomper::Cpp::GcppReturnStatement;
use Chomper::Cpp::GcppSelection;
use Chomper::Cpp::GcppShiftExpression;
use Chomper::Cpp::GcppSpecialize;
use Chomper::Cpp::GcppStatement;
use Chomper::Cpp::GcppStorageClass;
use Chomper::Cpp::GcppStr;
use Chomper::Cpp::GcppStructuredBinding;
use Chomper::Cpp::GcppSuffix;
use Chomper::Cpp::GcppTemplate;
use Chomper::Cpp::GcppToken;
use Chomper::Cpp::GcppTranslationUnit;
use Chomper::Cpp::GcppTry;
use Chomper::Cpp::GcppTypeId;
use Chomper::Cpp::GcppTypeModifier;
use Chomper::Cpp::GcppTypeName;
use Chomper::Cpp::GcppTypeParam;
use Chomper::Cpp::GcppTypeSpecifier;
use Chomper::Cpp::GcppTypedef;
use Chomper::Cpp::GcppUnaryExpression;
use Chomper::Cpp::GcppUserDefinedLiteral;
use Chomper::Cpp::GcppUsingDirective;
use Chomper::Cpp::GcppVirtual;

our role CppParser 
does AbstractDeclaratorGrammar::Rules
does TypedefGrammar::Rules
does AccessGrammar::Rules
does AdditiveExpressionGrammar::Rules
does AlignGrammar::Rules
does AndExpressionGrammar::Rules
does AsmGrammar::Rules
does AssignmentExpressionGrammar::Rules
does AttributeSpecifierSeqGrammar::Rules
does AttributedStatementGrammar::Rules
does BalancedGrammar::Rules
does BaseGrammar::Rules
does BinGrammar::Rules
does BooleanLiteralGrammar::Rules
does CVGrammar::Rules
does CastExpressionGrammar::Rules
does CharacterLiteralGrammar::Rules
does ClassGrammar::Rules
does ClassOrDeclTypeGrammar::Rules
does CommentGrammar::Rules
does ConditionGrammar::Rules
does ConditionalExpressionGrammar::Rules
does ConstructorGrammar::Rules
does ConversionGrammar::Rules
does DecGrammar::Rules
does DeclSpecifierGrammar::Rules
does DeclarationGrammar::Rules
does DeclaratorGrammar::Rules
does DeleteExpressionGrammar::Rules
does ElaboratedTypeSpecifierGrammar::Rules
does EncodingGrammar::Rules
does EnumGrammar::Rules
does EqualityExpressionGrammar::Rules
does EscapeGrammar::Rules
does ExceptionGrammar::Rules
does ExpressionGrammar::Rules
does FloatingLiteralGrammar::Rules
does ForInitStatementGrammar::Rules
does ForRangeGrammar::Rules
does FunctionGrammar::Rules
does HexGrammar::Rules
does IdExpressionGrammar::Rules
does IdentifierGrammar::Rules
does InstantiationGrammar::Rules
does IntegerLiteralGrammar::Rules
does IterationStatementGrammar::Rules
does JumpStatementGrammar::Rules
does KeywordGrammar::Rules
does LabeledStatementGrammar::Rules
does LambdaExpressionGrammar::Rules
does LinkageGrammar::Rules
does LiteralGrammar::Rules
does LogicalExpressionGrammar::Rules
does MemInitializerGrammar::Rules
does MemberGrammar::Rules
does MultiLineMacroGrammar::Rules
does MultiplicativeExpressionGrammar::Rules
does NamespaceGrammar::Rules
does NestedNameSpecifierGrammar::Rules
does NewExpressionGrammar::Rules
does NoExceptExpressionGrammar::Rules
does NoPointerDeclaratorGrammar::Rules
does OctGrammar::Rules
does OperatorGrammar::Rules
does OperatorIdGrammar::Rules
does OrExpressionGrammar::Rules
does ParametersGrammar::Rules
does PointerDeclaratorGrammar::Rules
does PointerLiteralGrammar::Rules
does PointerMemberGrammar::Rules
does PointerOperatorGrammar::Rules
does PostfixExpressionGrammar::Rules
does PrimaryExpressionGrammar::Rules
does PseudoDestructorNameGrammar::Rules
does PunctuationGrammar::Rules
does PureGrammar::Rules
does RefGrammar::Rules
does RelationalExpressionGrammar::Rules
does ReturnStatementGrammar::Rules
does SelectionStatementGrammar::Rules
does ShiftExpressionGrammar::Rules
does SpecializeGrammar::Rules
does StatementGrammar::Rules
does StorageClassGrammar::Rules
does StructuredBindingGrammar::Rules
does StringLiteralGrammar::Rules
does SuffixGrammar::Rules
does TemplateGrammar::Rules
does TokenGrammar::Rules
does TranslationUnitGrammar::Rules
does TryGrammar::Rules
does TypeIdGrammar::Rules
does TypeModifierGrammar::Rules
does TypeNameGrammar::Rules
does TypeParameterGrammar::Rules
does TypeSpecifierGrammar::Rules
does UnaryExpressionGrammar::Rules
does UserDefinedLiteralGrammar::Rules
does UsingDirectiveGrammar::Rules
does VirtualGrammar::Rules
is export
{
    rule TOP {
        <ws> 
        <statement-seq>
    }
}
