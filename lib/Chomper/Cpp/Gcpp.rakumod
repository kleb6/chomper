unit module Chomper::Cpp::Gcpp;

use Grammar::Tracer;

use Chomper::Cpp::GcppAbstractDeclarator;
use Chomper::Cpp::GcppAccess;
use Chomper::Cpp::GcppAdditiveExpression;
use Chomper::Cpp::GcppAlign;
use Chomper::Cpp::GcppAndExpression;
use Chomper::Cpp::GcppAsm;
use Chomper::Cpp::GcppAssignment;
use Chomper::Cpp::GcppAttr;
use Chomper::Cpp::GcppAttributedStatement;
use Chomper::Cpp::GcppBalanced;
use Chomper::Cpp::GcppBase;
use Chomper::Cpp::GcppBin;
use Chomper::Cpp::GcppBool;
use Chomper::Cpp::GcppCastExpression;
use Chomper::Cpp::GcppChar;
use Chomper::Cpp::GcppClassOrDecltype;
use Chomper::Cpp::GcppClass;
use Chomper::Cpp::GcppComment;
use Chomper::Cpp::GcppCondition;
use Chomper::Cpp::GcppConditionalExpression;
use Chomper::Cpp::GcppConstructor;
use Chomper::Cpp::GcppConversion;
use Chomper::Cpp::GcppCv;
use Chomper::Cpp::GcppDec;
use Chomper::Cpp::GcppDeclSpecifier;
use Chomper::Cpp::GcppDeclaration;
use Chomper::Cpp::GcppDeclarator;
use Chomper::Cpp::GcppDeleteExpression;
use Chomper::Cpp::GcppElaboratedTypeSpecifier;
use Chomper::Cpp::GcppEncoding;
use Chomper::Cpp::GcppEnum;
use Chomper::Cpp::GcppEqExpression;
use Chomper::Cpp::GcppEscape;
use Chomper::Cpp::GcppException;
use Chomper::Cpp::GcppExpression;
use Chomper::Cpp::GcppFloat;
use Chomper::Cpp::GcppForInit;
use Chomper::Cpp::GcppForRange;
use Chomper::Cpp::GcppFunction;
use Chomper::Cpp::GcppHex;
use Chomper::Cpp::GcppIdExpression;
use Chomper::Cpp::GcppIdent;
use Chomper::Cpp::GcppInstantiate;
use Chomper::Cpp::GcppIntegerLiteral;
use Chomper::Cpp::GcppIteration;
use Chomper::Cpp::GcppJumpStatement;
use Chomper::Cpp::GcppKeywords;
use Chomper::Cpp::GcppLabeledStatement;
use Chomper::Cpp::GcppLambda;
use Chomper::Cpp::GcppLinkage;
use Chomper::Cpp::GcppLiteral;
use Chomper::Cpp::GcppLogicalExpression;
use Chomper::Cpp::GcppMacro;
use Chomper::Cpp::GcppMemInitializer;
use Chomper::Cpp::GcppMember;
use Chomper::Cpp::GcppMultiplicativeExpression;
use Chomper::Cpp::GcppNamespace;
use Chomper::Cpp::GcppNestedName;
use Chomper::Cpp::GcppNew;
use Chomper::Cpp::GcppNoPtr;
use Chomper::Cpp::GcppNoexcept;
use Chomper::Cpp::GcppOct;
use Chomper::Cpp::GcppOperatorId;
use Chomper::Cpp::GcppOperator;
use Chomper::Cpp::GcppOrExpression;
use Chomper::Cpp::GcppParam;
use Chomper::Cpp::GcppPostfixExpression;
use Chomper::Cpp::GcppPrimaryExpression;
use Chomper::Cpp::GcppPseudoDtor;
use Chomper::Cpp::GcppPtrDeclarator;
use Chomper::Cpp::GcppPtrMember;
use Chomper::Cpp::GcppPtrOperator;
use Chomper::Cpp::GcppPtr;
use Chomper::Cpp::GcppPunctuation;
use Chomper::Cpp::GcppPure;
use Chomper::Cpp::GcppRef;
use Chomper::Cpp::GcppRelationalExpression;
use Chomper::Cpp::GcppReturnStatement;
use Chomper::Cpp::GcppSelection;
use Chomper::Cpp::GcppShiftExpression;
use Chomper::Cpp::GcppSpecialize;
use Chomper::Cpp::GcppStatement;
use Chomper::Cpp::GcppStorageClass;
use Chomper::Cpp::GcppStr;
use Chomper::Cpp::GcppSuffix;
use Chomper::Cpp::GcppTemplate;
use Chomper::Cpp::GcppToken;
use Chomper::Cpp::GcppTranslationUnit;
use Chomper::Cpp::GcppTry;
use Chomper::Cpp::GcppTypeId;
use Chomper::Cpp::GcppTypeModifier;
use Chomper::Cpp::GcppTypeName;
use Chomper::Cpp::GcppTypeParam;
use Chomper::Cpp::GcppTypeSpecifier;
use Chomper::Cpp::GcppTypedef;
use Chomper::Cpp::GcppUnaryExpression;
use Chomper::Cpp::GcppUserDefinedLiteral;
use Chomper::Cpp::GcppUsingDirective;
use Chomper::Cpp::GcppVirtual;

our role Cpp::Parser 
does AbstractDeclarator::Rules
does Typedef::Rules
does Access::Rules
does AdditiveExpression::Rules
does Align::Rules
does AndExpression::Rules
does Asm::Rules
does AssignmentExpression::Rules
does AttributeSpecifierSeq::Rules
does AttributedStatement::Rules
does Balanced::Rules
does Base::Rules
does Bin::Rules
does BooleanLiteral::Rules
does CV::Rules
does CastExpression::Rules
does CharacterLiteral::Rules
does Class::Rules
does ClassOrDeclType::Rules
does Comment::Rules
does Condition::Rules
does ConditionalExpression::Rules
does Constructor::Rules
does Conversion::Rules
does Dec::Rules
does DeclSpecifier::Rules
does Declaration::Rules
does Declarator::Rules
does DeleteExpression::Rules
does ElaboratedTypeSpecifier::Rules
does Encoding::Rules
does Enum::Rules
does EqualityExpression::Rules
does Escape::Rules
does Exception::Rules
does Expression::Rules
does FloatingLiteral::Rules
does ForInitStatement::Rules
does ForRange::Rules
does Function::Rules
does Hex::Rules
does IdExpression::Rules
does Identifier::Rules
does Instantiation::Rules
does IntegerLiteral::Rules
does IterationStatement::Rules
does JumpStatement::Rules
does Keyword::Rules
does LabeledStatement::Rules
does LambdaExpression::Rules
does Linkage::Rules
does Literal::Rules
does LogicalExpression::Rules
does MemInitializer::Rules
does Member::Rules
does MultiLineMacro::Rules
does MultiplicativeExpression::Rules
does Namespace::Rules
does NestedNameSpecifier::Rules
does NewExpression::Rules
does NoExceptExpression::Rules
does NoPointerDeclarator::Rules
does Oct::Rules
does Operator::Rules
does OperatorId::Rules
does OrExpression::Rules
does Parameters::Rules
does PointerDeclarator::Rules
does PointerLiteral::Rules
does PointerMember::Rules
does PointerOperator::Rules
does PostfixExpression::Rules
does PrimaryExpression::Rules
does PseudoDestructorName::Rules
does Punctuation::Rules
does Pure::Rules
does Ref::Rules
does RelationalExpression::Rules
does ReturnStatement::Rules
does SelectionStatement::Rules
does ShiftExpression::Rules
does Specialize::Rules
does Statement::Rules
does StorageClass::Rules
does StringLiteral::Rules
does Suffix::Rules
does Template::Rules
does Token::Rules
does TranslationUnit::Rules
does Try::Rules
does TypeId::Rules
does TypeModifier::Rules
does TypeName::Rules
does TypeParameter::Rules
does TypeSpecifier::Rules
does UnaryExpression::Rules
does UserDefinedLiteral::Rules
does UsingDirective::Rules
does Virtual::Rules
{
    rule TOP {
        <ws> 
        <statement-seq>
    }
}