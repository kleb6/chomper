#!/usr/bin/env raku
use v6;

=begin pod
this can parse the output of cargo build, when formatted as JSON (see cargo options)
it is meant to indicate which use crate::X statements we need in each file
it can be better
=end

use Data::Dump::Tree;
use JSON::Name;
use JSON::Class;

class CargoBuild does JSON::Class {
    class Profile does JSON::Class {
        has Bool $.test;
        has Str $.opt_level;
        has Bool $.overflow_checks;
        has Int $.debuginfo;
        has Bool $.debug_assertions;
    }
    class Target does JSON::Class {
        has Str $.src_path;
        has Str $.edition;
        has Str $.name;
        has Bool $.doctest;
        has Bool $.doc;
        has  @.kind;
        has Bool $.test;
        has  @.crate_types;
    }
    class Text does JSON::Class {
        has Str $.text;
        has Int $.highlight_end;
        has Int $.highlight_start;
    }
    class Span does JSON::Class {
        class Text does JSON::Class {
            has Str $.text;
            has Int $.highlight_end;
            has Int $.highlight_start;
        }
        has Str $.file_name;
        has Str $.suggestion_applicability;
        has Bool $.is_primary;
        has Int $.line_end;
        has Text @.text;
        has Str $.suggested_replacement;
        has Int $.byte_end;
        has Int $.byte_start;
        has Any $.expansion;
        has Int $.line_start;
        has Int $.column_end;
        has Int $.column_start;
        has Any $.label;
    }
    class Children does JSON::Class {
        class Text does JSON::Class {
            has Str $.text;
            has Int $.highlight_end;
            has Int $.highlight_start;
        }
        class Span does JSON::Class {
            class Text does JSON::Class {
                has Str $.text;
                has Int $.highlight_end;
                has Int $.highlight_start;
            }
            has Str $.file_name;
            has Str $.suggestion_applicability;
            has Bool $.is_primary;
            has Int $.line_end;
            has Text @.text;
            has Str $.suggested_replacement;
            has Int $.byte_end;
            has Int $.byte_start;
            has Any $.expansion;
            has Int $.line_start;
            has Int $.column_end;
            has Int $.column_start;
            has Any $.label;
        }
        has Str $.message;
        has Any $.rendered;
        has Span @.spans;
        has Any $.code;
        has Str $.level;
        has  @.children;
    }
    class Code does JSON::Class {
        has Str $.explanation;
        has Str $.code;
    }
    class Message does JSON::Class {
        class Text does JSON::Class {
            has Str $.text;
            has Int $.highlight_end;
            has Int $.highlight_start;
        }
        class Span does JSON::Class {
            class Text does JSON::Class {
                has Str $.text;
                has Int $.highlight_end;
                has Int $.highlight_start;
            }
            has Str $.file_name;
            has Str $.suggestion_applicability;
            has Bool $.is_primary;
            has Int $.line_end;
            has Text @.text;
            has Str $.suggested_replacement;
            has Int $.byte_end;
            has Int $.byte_start;
            has Any $.expansion;
            has Int $.line_start;
            has Int $.column_end;
            has Int $.column_start;
            has Any $.label;
        }
        class Children does JSON::Class {
            class Text does JSON::Class {
                has Str $.text;
                has Int $.highlight_end;
                has Int $.highlight_start;
            }
            class Span does JSON::Class {
                class Text does JSON::Class {
                    has Str $.text;
                    has Int $.highlight_end;
                    has Int $.highlight_start;
                }
                has Str $.file_name;
                has Str $.suggestion_applicability;
                has Bool $.is_primary;
                has Int $.line_end;
                has Text @.text;
                has Str $.suggested_replacement;
                has Int $.byte_end;
                has Int $.byte_start;
                has Any $.expansion;
                has Int $.line_start;
                has Int $.column_end;
                has Int $.column_start;
                has Any $.label;
            }
            has Str $.message;
            has Any $.rendered;
            has Span @.spans;
            has Any $.code;
            has Str $.level;
            has  @.children;
        }
        class Code does JSON::Class {
            has Str $.explanation;
            has Str $.code;
        }
        has Str $.level;
        has Code $.code;
        has Children @.children;
        has Span @.spans;
        has Str $.message;
        has Str $.rendered;
    }
    has  @.env;
    has  @.cfgs;
    has  @.linked_libs;
    has  @.features;
    has Str $.manifest_path;
    has Bool $.fresh;
    has Bool $.success;
    has Any $.executable;
    has Target $.target;
    has Message $.message;
    has Profile $.profile;
    has  @.linked_paths;
    has Str $.out_dir;
    has Str $.package_id;
    has  @.filenames;
    has Str $.reason;
}

sub get-cargo-error-json {

    qqx/cargo build --quiet --message-format=json 2> \/dev\/null | jq --slurp /
}

sub get-json-len($in) {

    my $proc = run 'jq', "length", :in, :out; $proc.in.say($in); $proc.in.close;

    $proc.out.slurp(close => True).chomp.Int
}

sub get-json-item($idx, $in) {

    my $proc = run 'jq', ".[$idx]", :in, :out; $proc.in.say($in); $proc.in.close;

     $proc.out.slurp(close => True).chomp

}

sub get-elem($json) {

    my $filename  = Nil;
    my $suggested = Nil;

    my $obj = CargoBuild.from-json($json);

    try {

        my $message = $obj.message;

        if $message {
            my $rendered = $message.rendered.Str;

            if $rendered ~~ /'consider importing this struct'/ {

                my $code = $message.code;

                if $code {

                    my $num = $code.code;

                    if $num eq "E0412" {

                        #unsure why these branches are different
                        if $message.children.elems >= 2 {
                            $filename  = $message.children[0].spans[0].file_name.Str.chomp;
                            $suggested = $message.children[1].spans[0].suggested_replacement.Str.chomp;
                        } else {
                            $filename  = $message.children[0].spans[0].file_name.Str.chomp;
                            $suggested = $message.children[0].spans[0].suggested_replacement.Str.chomp;

                        }
                    }
                }
            }
        }
        CATCH {
            default {
                $*ERR.say: .message;
            }
        }
    }         
    ($filename, $suggested)
}

sub MAIN(:$apply = False) {

    my $in = get-cargo-error-json();
    my $len = get-json-len($in);
    my %map = %();

    my @pairs = race for 0..$len {

        my $json = get-json-item($_, $in);

        get-elem($json)
    }

    for @pairs -> $pair {

        my $filename  = $pair[0];
        my $suggested = $pair[1];

        given ($filename, $suggested) {
            when (Str, Str) {
                if %map{$filename}:exists {
                    %map{$filename}.set($suggested);
                } else {
                    %map{$filename} = SetHash.new($suggested);
                }
            }
        }

    }

    for %map.kv -> $filename, $suggested {
        my $content  = $filename.IO.slurp.lines;
        my $preamble = $suggested.keys>>.chomp.join("\n");
        if $apply {
            spurt $filename, [$content[0], $preamble, $content[1..*].join("\n")].join("\n");
        } else {
            say $filename; 
            say $preamble;
        }
    }

}

