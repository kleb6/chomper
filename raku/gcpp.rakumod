use Grammar::Tracer;

use gcpp-abstract-declarator;
use gcpp-access;
use gcpp-additive-expression;
use gcpp-align;
use gcpp-and-expression;
use gcpp-asm;
use gcpp-assignment;
use gcpp-attr;
use gcpp-attributed-statement;
use gcpp-balanced;
use gcpp-base;
use gcpp-bin;
use gcpp-bool;
use gcpp-cast-expression;
use gcpp-char;
use gcpp-class-or-decltype;
use gcpp-class;
use gcpp-comment;
use gcpp-condition;
use gcpp-conditional-expression;
use gcpp-constructor;
use gcpp-conversion;
use gcpp-cv;
use gcpp-dec;
use gcpp-decl-specifier;
use gcpp-declaration;
use gcpp-declarator;
use gcpp-delete-expression;
use gcpp-elaborated-type-specifier;
use gcpp-encoding;
use gcpp-enum;
use gcpp-eq-expression;
use gcpp-escape;
use gcpp-exception;
use gcpp-expression;
use gcpp-float;
use gcpp-for-init;
use gcpp-for-range;
use gcpp-function;
use gcpp-hex;
use gcpp-id-expression;
use gcpp-ident;
use gcpp-instantiate;
use gcpp-integer-literal;
use gcpp-iteration;
use gcpp-jump-statement;
use gcpp-keywords;
use gcpp-labeled-statement;
use gcpp-lambda;
use gcpp-linkage;
use gcpp-literal;
use gcpp-logical-expression;
use gcpp-macro;
use gcpp-mem-initializer;
use gcpp-member;
use gcpp-multiplicative-expression;
use gcpp-namespace;
use gcpp-nested-name;
use gcpp-new;
use gcpp-no-ptr;
use gcpp-noexcept;
use gcpp-oct;
use gcpp-operator-id;
use gcpp-operator;
use gcpp-or-expression;
use gcpp-param;
use gcpp-postfix-expression;
use gcpp-primary-expression;
use gcpp-pseudo-dtor;
use gcpp-ptr-declarator;
use gcpp-ptr-member;
use gcpp-ptr-operator;
use gcpp-ptr;
use gcpp-punctuation;
use gcpp-pure;
use gcpp-ref;
use gcpp-relational-expression;
use gcpp-return-statement;
use gcpp-selection;
use gcpp-shift-expression;
use gcpp-specialize;
use gcpp-statement;
use gcpp-storage-class;
use gcpp-str;
use gcpp-suffix;
use gcpp-template;
use gcpp-token;
use gcpp-translation-unit;
use gcpp-try;
use gcpp-type-id;
use gcpp-type-modifier;
use gcpp-type-name;
use gcpp-type-param;
use gcpp-type-specifier;
use gcpp-typedef;
use gcpp-unary-expression;
use gcpp-user-defined-literal;
use gcpp-using-directive;
use gcpp-virtual;

our role Cpp::Parser 
does AbstractDeclarator::Rules
does Typedef::Rules
does Access::Rules
does AdditiveExpression::Rules
does Align::Rules
does AndExpression::Rules
does Asm::Rules
does AssignmentExpression::Rules
does AttributeSpecifierSeq::Rules
does AttributedStatement::Rules
does Balanced::Rules
does Base::Rules
does Bin::Rules
does BooleanLiteral::Rules
does CV::Rules
does CastExpression::Rules
does CharacterLiteral::Rules
does Class::Rules
does ClassOrDeclType::Rules
does Comment::Rules
does Condition::Rules
does ConditionalExpression::Rules
does Constructor::Rules
does Conversion::Rules
does Dec::Rules
does DeclSpecifier::Rules
does Declaration::Rules
does Declarator::Rules
does DeleteExpression::Rules
does ElaboratedTypeSpecifier::Rules
does Encoding::Rules
does Enum::Rules
does EqualityExpression::Rules
does Escape::Rules
does Exception::Rules
does Expression::Rules
does FloatingLiteral::Rules
does ForInitStatement::Rules
does ForRange::Rules
does Function::Rules
does Hex::Rules
does IdExpression::Rules
does Identifier::Rules
does Instantiation::Rules
does IntegerLiteral::Rules
does IterationStatement::Rules
does JumpStatement::Rules
does Keyword::Rules
does LabeledStatement::Rules
does LambdaExpression::Rules
does Linkage::Rules
does Literal::Rules
does LogicalExpression::Rules
does MemInitializer::Rules
does Member::Rules
does MultiLineMacro::Rules
does MultiplicativeExpression::Rules
does Namespace::Rules
does NestedNameSpecifier::Rules
does NewExpression::Rules
does NoExceptExpression::Rules
does NoPointerDeclarator::Rules
does Oct::Rules
does Operator::Rules
does OperatorId::Rules
does OrExpression::Rules
does Parameters::Rules
does PointerDeclarator::Rules
does PointerLiteral::Rules
does PointerMember::Rules
does PointerOperator::Rules
does PostfixExpression::Rules
does PrimaryExpression::Rules
does PseudoDestructorName::Rules
does Punctuation::Rules
does Pure::Rules
does Ref::Rules
does RelationalExpression::Rules
does ReturnStatement::Rules
does SelectionStatement::Rules
does ShiftExpression::Rules
does Specialize::Rules
does Statement::Rules
does StorageClass::Rules
does StringLiteral::Rules
does Suffix::Rules
does Template::Rules
does Token::Rules
does TranslationUnit::Rules
does Try::Rules
does TypeId::Rules
does TypeModifier::Rules
does TypeName::Rules
does TypeParameter::Rules
does TypeSpecifier::Rules
does UnaryExpression::Rules
does UserDefinedLiteral::Rules
does UsingDirective::Rules
does Virtual::Rules
{
    rule TOP {
        <ws> 
        <statement-seq>
    }
}
