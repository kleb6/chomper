#!/usr/bin/env raku
use lib 'lib';
use Chomper::Core::GlobalSubparse;
use File::Find;

my @python-uses = [
    "use pyrust;",                            
    "use gpython-function-header;",
    "use gpython3-indent;",
    "use gpython3-keywords;",
    "use gpython3-name;",
    "use gpython3-numeric;",
    "use gpython3-operators;",
    "use gpython3-strings;",
    "use gpython3-typedargs;",
    "use gpython3-varargs;",
    "use gpython3;",
    "use python-function-header;",
    "use python-to-rust-actions;",
    "use python3-args;",
    "use python3-class;",
    "use python3-comment;",
    "use python3-compound;",
    "use python3-comprehension;",
    "use python3-decorator;",
    "use python3-dunder-init;",
    "use python3-dunder;",
    "use python3-expr;",
    "use python3-func;",
    "use python3-lambdef;",
    "use python3-prelude;",
    "use python3-stmt;",
    "use python3-suite;",
    "use python3-varargs;",
];

my @cpp-uses = [
    "use cpp-actions;",
    "use cpp-model;",
    "use cpp-translate;",
    "use gcpp-abstract-declarator;",
    "use gcpp-access;",
    "use gcpp-additive-expression;",
    "use gcpp-align;",
    "use gcpp-and-expression;",
    "use gcpp-asm;",
    "use gcpp-assignment;",
    "use gcpp-attr;",
    "use gcpp-attributed-statement;",
    "use gcpp-balanced;",
    "use gcpp-base;",
    "use gcpp-bin;",
    "use gcpp-bool;",
    "use gcpp-cast-expression;",
    "use gcpp-char;",
    "use gcpp-class-or-decltype;",
    "use gcpp-class;",
    "use gcpp-comment;",
    "use gcpp-condition;",
    "use gcpp-conditional-expression;",
    "use gcpp-constructor;",
    "use gcpp-conversion;",
    "use gcpp-cv;",
    "use gcpp-dec;",
    "use gcpp-decl-specifier;",
    "use gcpp-declaration;",
    "use gcpp-declarator;",
    "use gcpp-decltype;",
    "use gcpp-delete-expression;",
    "use gcpp-digit;",
    "use gcpp-elaborated-type-specifier;",
    "use gcpp-encoding;",
    "use gcpp-enum;",
    "use gcpp-eq-expression;",
    "use gcpp-escape;",
    "use gcpp-exception;",
    "use gcpp-expression;",
    "use gcpp-float;",
    "use gcpp-for-init;",
    "use gcpp-for-range;",
    "use gcpp-function;",
    "use gcpp-hex;",
    "use gcpp-id-expression;",
    "use gcpp-ident;",
    "use gcpp-instantiate;",
    "use gcpp-integer-literal;",
    "use gcpp-iteration;",
    "use gcpp-jump-statement;",
    "use gcpp-keywords;",
    "use gcpp-labeled-statement;",
    "use gcpp-lambda;",
    "use gcpp-linkage;",
    "use gcpp-literal;",
    "use gcpp-logical-expression;",
    "use gcpp-macro;",
    "use gcpp-mem-initializer;",
    "use gcpp-member;",
    "use gcpp-multiplicative-expression;",
    "use gcpp-namespace;",
    "use gcpp-nested-name;",
    "use gcpp-new;",
    "use gcpp-no-ptr;",
    "use gcpp-noexcept;",
    "use gcpp-oct;",
    "use gcpp-operator-id;",
    "use gcpp-operator;",
    "use gcpp-or-expression;",
    "use gcpp-param;",
    "use gcpp-postfix-expression;",
    "use gcpp-primary-expression;",
    "use gcpp-pseudo-dtor;",
    "use gcpp-ptr-declarator;",
    "use gcpp-ptr-member;",
    "use gcpp-ptr-operator;",
    "use gcpp-ptr;",
    "use gcpp-punctuation;",
    "use gcpp-pure;",
    "use gcpp-ref;",
    "use gcpp-relational-expression;",
    "use gcpp-return-statement;",
    "use gcpp-roles;",
    "use gcpp-selection;",
    "use gcpp-shift-expression;",
    "use gcpp-simple-type-specifier;",
    "use gcpp-specialize;",
    "use gcpp-statement;",
    "use gcpp-storage-class;",
    "use gcpp-str;",
    "use gcpp-suffix;",
    "use gcpp-template;",
    "use gcpp-token;",
    "use gcpp-translation-unit;",
    "use gcpp-try;",
    "use gcpp-type-id;",
    "use gcpp-type-modifier;",
    "use gcpp-type-name;",
    "use gcpp-type-param;",
    "use gcpp-type-specifier;",
    "use gcpp-typedef;",
    "use gcpp-unary-expression;",
    "use gcpp-user-defined-literal;",
    "use gcpp-using-directive;",
    "use gcpp-virtual;",
    "use gcpp;",
    "use generate-cpp-model;",
];

my @rust-uses = [
    "use grust-array-expression;",
    "use grust-ascii;",
    "use grust-assoc-items;",
    "use grust-block-comment;",
    "use grust-block-expressions;",
    "use grust-boolean-literal;",
    "use grust-byte-literal;",
    "use grust-byte-string-literal;",
    "use grust-cfg-attr;",
    "use grust-char-literal;",
    "use grust-closure-expressions;",
    "use grust-comment;",
    "use grust-configuration;",
    "use grust-crate-grammar;",
    "use grust-crate;",
    "use grust-delimiters;",
    "use grust-doc-comment;",
    "use grust-enumerations;",
    "use grust-expressions;",
    "use grust-external-blocks;",
    "use grust-float-literal;",
    "use grust-from-antlr;",
    "use grust-function-pointer-types;",
    "use grust-functions;",
    "use grust-generic-args;",
    "use grust-generic-parameters;",
    "use grust-identifiers;",
    "use grust-if-expressions;",
    "use grust-impl-trait;",
    "use grust-int-literal;",
    "use grust-item;",
    "use grust-jump-expressions;",
    "use grust-keyword;",
    "use grust-lifetimes;",
    "use grust-line-comment;",
    "use grust-literal-pattern;",
    "use grust-literal;",
    "use grust-loop-expression;",
    "use grust-macros;",
    "use grust-match-expressions;",
    "use grust-meta-item;",
    "use grust-model;",
    "use grust-path-expressions;",
    "use grust-paths;",
    "use grust-pattern-expressions;",
    "use grust-punctuation;",
    "use grust-range-patterns;",
    "use grust-reference-patterns;",
    "use grust-reserved-keywords;",
    "use grust-statements;",
    "use grust-strict-keywords;",
    "use grust-string-literal;",
    "use grust-struct-expressions;",
    "use grust-struct-patterns;",
    "use grust-structs;",
    "use grust-tokens;",
    "use grust-trait-objects;",
    "use grust-traits;",
    "use grust-tuple-expression;",
    "use grust-tuple-struct-patterns;",
    "use grust-type-alias;",
    "use grust-type-path;",
    "use grust-types;",
    "use grust-unions;",
    "use grust-use-declaration;",
    "use grust-visibility;",
    "use grust-weak-keywords;",
    "use grust-where-clause;",
    "use grust-whitespace;",
    "use grust-xid;",
    "use indent-rust-named-type-list;",
    "use infer-rustdoc;",
    "use rust-ffi;",
    "use rust-grammar;",
    "use to-rust-ident;",
    "use to-rust-params;",
    "use to-rust-type;",
];

my @translate-uses = [
    "use translate-cpp;",
    "use translate-io;",
    "use translate-ir;",
    "use translate-postfix-expression-list;",
    "use translate-python;",
    "use translator;",
];

my @uses = [
    "use abstract_functions;",
    "use align-column;",
    "use align;",
    "use antlr-grammar;",
    "use api;",
    "use args;",
    "use avoid-keywords;",
    "use block-comment;",
    "use braced-array-literal;",
    "use cargo-workspace;",
    "use cargo;",
    "use case;",
    "use clean-macro;",
    "use comments;",
    "use constexpr_globals;",
    "use constructor;",
    "use crates;",
    "use ctor_header;",
    "use dequote;",
    "use destructor;",
    "use doxy-comment;",
    "use enum_members;",
    "use feedback;",
    "use format-name;",
    "use format-textwidth;",
    "use formatting;",
    "use formula;",
    "use full_enum;",
    "use full_struct;",
    "use function-locals;",
    "use function;",
    "use get-left-margin;",
    "use gfunction-header;",
    "use git;",
    "use gjson;",
    "use gkeywords;",
    "use global-subparse;",
    "use grammar;",
    "use gsimple-ifdef;",
    "use gtype;",
    "use gyacc;",
    "use hasher;",
    "use hungarian;",
    "use ident-token;",
    "use ix-bang;",
    "use lib 'lib';",
    "use line-break;",
    "use line-comment-to-block-comment;",
    "use locations;",
    "use maximally-shift-toward-left-margin;",
    "use numeric-token;",
    "use op_add;",
    "use op_bitand;",
    "use op_bitor;",
    "use op_convert;",
    "use op_div;",
    "use op_div_eq;",
    "use op_eq;",
    "use op_index;",
    "use op_mul;",
    "use op_mul_eq;",
    "use op_negate;",
    "use op_shift;",
    "use op_sub;",
    "use op_xor;",
    "use operator_indirect;",
    "use operator_into_bool;",
    "use operator_not;",
    "use operators;",
    "use ostream;",
    "use pound_define;",
    "use quoted-string-token;",
    "use reformat-block-comment;",
    "use remove-comment-tokens;",
    "use remove-double-newlines;",
    "use return-type;",
    "use rule-braced-array-literal;",
    "use rule-line-comment;",
    "use segment-remove-duplicates;",
    "use simple_ifdef;",
    "use snake-case;",
    "use static_const;",
    "use struct_members;",
    "use template;",
    "use textwidth;",
    "use time;",
    "use todo-block;",
    "use tree-mark;",
    "use type-info;",
    "use typedef_fn_ptr;",
    "use typemap;",
    "use using_declarations;",
    "use util;",
    "use vbar;",
    "use wrap-body-todo;",
    "use wrap-comment;",
    "use yacc-actions;",
];

sub create-new-use-statement($old, $prefix) {

    my $token = $old.split(" ")[1].split(/\- | _/)>>.tc.join;

    "use " ~ $prefix ~ $token
}

sub use-statement-mappings(@list, $prefix) {
    @list
    ==> map({
        ($_, create-new-use-statement($_, $prefix))
    })
}

sub MAIN {

    my @mappings = [
        |use-statement-mappings(@python-uses,    "Chomper::Py3::"),
        |use-statement-mappings(@cpp-uses,       "Chomper::Cpp::"),
        |use-statement-mappings(@rust-uses,      "Chomper::Rust::"),
        |use-statement-mappings(@translate-uses, "Chomper::Translate::"),
        |use-statement-mappings(@uses,           "Chomper::Core::"),
    ];

    find(dir => "lib")

    ==> grep({ $_ !~~ /precomp/ })

    ==> grep({ $_.IO.f })

    ==> map({

        my $text = $_.IO.slurp;

        for @mappings -> ($src, $dst) {

            $text .= subst($src, $dst, :g);
        }

        ($_, $text)
    })

    ==> map({
        my $file = $_[0];
        my $text = $_[1];
        $file.IO.spurt: $text;
    })
}
