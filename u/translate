#!/usr/bin/env raku 

#use Grammar::Tracer;

use Chomper::Util;
use Chomper::Comments;
use Chomper::DoxyComment;
use Chomper::ReformatBlockComment;
use Chomper::BlockComment;
use Chomper::LineCommentToBlockComment;
use Chomper::Typemap;
use Chomper::Locations;
use Chomper::Translator;
use Chomper::SnakeCase;

our sub get-hook($hookname) {

    #key matches grammar rules
    #will return one of these values
    my %dispatch = %(

        default-ctor                          => { use Chomper::Constructor;        &translate-default-ctor },
        #python-function-header                => { use Chomper::Py3::PythonFunctionHeader; &translate-python-function-header },
        simple-ifdef                          => { use Chomper::SimpleIfdef;       &translate-simple-ifdef },
        hashing-function                      => { use Chomper::Hasher;             &translate-hasher },
        op-add-eq-function-header             => { use Chomper::OpAdd;             &translate-op-add-eq },
        op-bitor-assign-function-header       => { use Chomper::OpBitor;           &translate-op-bitor-assign },
        op-bitand-assign-function-header      => { use Chomper::OpBitand;          &translate-op-bitand-assign },
        op-add-function-header                => { use Chomper::OpAdd;             &translate-op-add },
        function-declaration                  => { use Chomper::Function;           &translate-function },
        constructor-definition-header         => { use Chomper::Constructor;        &translate-ctor },
        op-div-function-header                => { use Chomper::OpDiv;             &translate-op-div },
        op-div-eq-function-header             => { use Chomper::OpDivEq;          &translate-op-div-eq },
        op-eq-function-header                 => { use Chomper::OpEq;              &translate-op-eq },
        op-lt-function-header                 => { use Chomper::OpEq;              &translate-op-lt },
        op-index-function-header              => { use Chomper::OpIndex;           &translate-op-index },
        op-xor-function-header                => { use Chomper::OpXor;             &translate-op-xor },
        op-bitand-function-header             => { use Chomper::OpBitand;          &translate-op-bitand },
        op-bitor-function-header              => { use Chomper::OpBitor;           &translate-op-bitor },
        op-mul-function-header                => { use Chomper::OpMul;             &translate-op-mul },
        op-mul-eq-function-header             => { use Chomper::OpMulEq;          &translate-op-mul-eq },
        op-negate-function-header             => { use Chomper::OpNegate;          &translate-op-negate },
        op-sub-function-header                => { use Chomper::OpSub;             &translate-op-sub },
        op-sub-eq-function-header             => { use Chomper::OpSub;             &translate-op-sub-eq },
        freestanding-template-function-header => { use Chomper::Template;           &translate-freestanding-template-function },
        op-ostream-function-header            => { use Chomper::Ostream;            &translate-op-ostream },
        op-convert-function-header            => { use Chomper::OpConvert;         &translate-op-convert },
        static-constants                      => { use Chomper::StaticConst;       &translate-static-const },
        function-local-declarations           => { use Chomper::FunctionLocals;    &translate-function-locals },
        struct-member-declarations            => { use Chomper::StructMembers;     &translate-struct-member-declarations },
        enum-member-declarations              => { use Chomper::EnumMembers;       &translate-enum-member-declarations },
        full-struct                           => { use Chomper::FullStruct;        &translate-full-struct },
        full-enum                             => { use Chomper::FullEnum;          &translate-full-enum },
        abstract-function-declarations        => { use Chomper::AbstractFunctions; &translate-abstract-function-declarations },
        destructor                            => { use Chomper::Destructor;         &translate-destructor },
        ctor-header                           => { use Chomper::CtorHeader;        &translate-ctor-header },
        using-declarations                    => { use Chomper::UsingDeclarations; &translate-using-declarations },
        typedef-fn-ptrs                       => { use Chomper::TypedefFnPtr;     &translate-typedef-fn-ptrs },
        pound-define                          => { use Chomper::PoundDefine;       &translate-pound-define },
        constexpr-global-block                => { use Chomper::ConstexprGlobals;  &translate-constexpr-global-block },
        operator-into-bool                    => { use Chomper::OperatorIntoBool; &translate-operator-into-bool },
        operator-indirect                     => { use Chomper::OperatorIndirect;  &translate-operator-indirect },
        operator-not                          => { use Chomper::OperatorNot;       &translate-operator-not },
        op-shl-function-header                => { use Chomper::OpShift;           &translate-op-shl },
        op-shl-assign-function-header         => { use Chomper::OpShift;           &translate-op-shl-assign },
        op-shr-function-header                => { use Chomper::OpShift;           &translate-op-shr },
        op-shr-assign-function-header         => { use Chomper::OpShift;           &translate-op-shr-assign },
    );

    %dispatch{$hookname}()
}

sub success-cleanup() {
    sort-uniq-snake-case-file()
}

sub maybe-extract-comment(Match $m) {
    if $m<block-comment> {
        return parse-doxy-comment(~$m<block-comment>).chomp.trim;
    }

    if $m<line-comment> {

        my $line-comment  = format-rust-comments(get-rcomments-list($m));

        return parse-doxy-comment(
            line-comment-to-block-comment($line-comment)
        ).chomp.trim;
    }

    return Nil;
}

sub maybe-extract-func-tags(Match $m) {

    if $m<func-tags> {

        do for $m<func-tags><func-tag>.List {
            "#[{$_.Str.chomp.trim}]"
        }.join("\n")

    } else {
        Nil
    }
}

sub MAIN(
    :$chop = False, 
    :$class = Nil, 
    :$de-semicolon = False) { 

    #this makes it so we don't have to recompile 
    #every time we want to change the typemap
    my %*typemap = %typemap;

    #add whitelisted types to typemap
    #a whitelisted type is the same in Rust as it is in c++
    for $whitelist-file.IO.slurp.lines {
        %*typemap{$_} = $_;
    }

    for $text-typemap-file.IO.slurp.lines {
        my @tokens = $_.split(" ");
        my $head = @tokens[0];
        my $tail = @tokens[1..*].join(" ");
        %*typemap{$head} = $tail;
    }

    my $in = $*IN.slurp.chomp;

    if $de-semicolon {
        $in = $in.subst(rule { ';' $ }, '{ }');
    }

    my ($head, $body) = get_parts($in, $chop);

    my $match     
    = Translator.parse($head);

    my $hookname = ~$match<hook>.keys[0];
    my &hook      = &get-hook($hookname);

    my $comment  = maybe-extract-comment($match);
    my $submatch = $match<hook>{$hookname};
    my $tags     = maybe-extract-func-tags($submatch);

    if $submatch {

        given ($comment.WHAT, $tags.WHAT) {
            when (Str, Str) {
                say qq:to/END/;
                $comment
                $tags
                {&hook($submatch, $body, $class)}
                END
            }
            when (Str, Any) {
                say qq:to/END/;
                $comment
                {&hook($submatch, $body, $class)}
                END

            }
            when (Any, Str) {
                say qq:to/END/;
                $tags
                {&hook($submatch, $body, $class)}
                END

            }
            when (Any, Any) {
                say qq:to/END/;
                {&hook($submatch, $body, $class)}
                END
            }
        }

        success-cleanup();

    } else {

        say "could not parse submatch";
    }
}
