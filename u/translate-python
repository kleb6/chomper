#!/usr/bin/env raku
use Chomper::Py3::Gpython3;
use Chomper::Py3::Python3Class;
use Chomper::Py3::PythonToRustActions;

use Data::Dump::Tree;
use Chomper::Formatting;
use Chomper::DoxyComment;
use Data::Dump;
use JSON::Class;

class A does Python3::ToRustActions {}

grammar G does Python3 { }

use Grammar::Tracer;
grammar GD does Python3 { }

sub MAIN(Bool :$debug = False, :$rule = Nil, :$to-rust = True) {

    my $in = $*IN.slurp;

    my %kwargs = %();

    if $rule { 
        %kwargs<rule> = $rule; 
        $in = $in.chomp; 
    }

    if $to-rust { 
        %kwargs<actions> = A.new 
    }

    my $parsed = G.parse($in, |%kwargs) // GD.parse($in, |%kwargs);

    if $to-rust {
        for $parsed.made {
            given $_ {
                when Python3::Classdef {
                    say $_.translate-to-rust;
                }
                when Python3::FuncDef {
                    say $_.get-rust-scaffold(python-decorators => []);
                }
                when Python3::DecoratedFunction {
                    say $_.get-rust-scaffold();
                }
                when Python3::SimpleSuite {
                    if $_.stmts.elems eq 1 {

                        my $s0 = $_.stmts[0];

                        if $s0 ~~ Python3::ExprEquals {

                            if $s0.is-doc-comment() {
                                my $c = $s0.doc-comment-text();
                                $c = format-module-comment($c);
                                $c = parse-doxy-comment($c);
                                $c ~~ s:g/\/\*\*/\/\*\!/;
                                say $c
                            }
                        }
                    }
                }
                default {
                    if $_ {
                        say "-----------------[toplevel unparsed]";
                        say $_.WHAT;
                    }
                }
            }
        }
    } else {
        say $parsed;
    }
}
