#!/usr/bin/env raku
use Chomper::Cpp::CppActions;
use Chomper::Cpp::Gcpp;
use Chomper::TranslateIr;
use Chomper::TranslateIo;
use Data::Dump::Tree;

grammar G does CppParser {}

use Grammar::Tracer;
grammar GD does CppParser {}

sub MAIN(:$stdin = Nil) {

    my $in = $stdin 
        ?? $stdin.IO.slurp.chomp 
        !! $*IN.slurp.chomp;

    $in = $in.subst(/^\s+/,"");

    my $rule = "statement-seq";
    #my $rule = "postfix-expression";

    my $actions = CppActions.new;

    my $parsed = 
    G.parse($in, :$rule, :$actions) 
    // 
    GD.parse($in, :$rule, :$actions);

    if $parsed {

        say $parsed;

        my $made = $parsed.made;

        ddt $made;
        say $made>>.gist(treemark => True).join("\n");

        say "---------------------[gists]";

        for $made.List>>.gist.join("") {
            say $_.gist;
        }

        my $stripped      = $made.List>>.gist.join("").subst(:g, /<.ws>/,"");
        my $orig-stripped = $in.subst(:g, /<.ws>/,"");

        if not $stripped eq $orig-stripped {
            say "-----------------------------";
            say "round trip bug!!!";
            say "";
            say "orig:  $orig-stripped";
            say "rtrip: $stripped";
            die;
        }

        say "-------------[cpp round trip success]-------------";

        translate-ir(
            $made, 
            TranslationSource::<LangCpp>, 
            TranslationTarget::<LangRust>
        );
    }
}
