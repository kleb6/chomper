#!/usr/bin/env raku

use rust-grammar;
use Data::Dump::Tree;

my $do-made       = True;
my $do-round-trip = False;

sub MAIN(:$stdin = Nil) {

    my $in = $stdin 
        ?? $stdin.IO.slurp.chomp 
        !! $*IN.slurp.chomp;

    $in = $in.subst(/^\s+/,"");

    #my $rule = "crate";
    my $rule = "statements";

    my $actions = Rust::Actions.new;

    my $parsed = 
    Rust::Grammar.parse($in, :$rule, :$actions) 
    // 
    Rust::GrammarD.parse($in, :$rule, :$actions);

    if $parsed {

        say $parsed;

        return unless $do-made;

        my $made = $parsed.made;

        ddt $made;

        return unless $do-round-trip;

        say "---------------------[gists]";

        for $made.List>>.gist.join("") {
            say $_.gist;
        }

        my $stripped      = $made.List>>.gist.join("").subst(:g, /<.ws>/,"");
        my $orig-stripped = $in.subst(:g, /<.ws>/,"");

        if not $stripped eq $orig-stripped {
            say "-----------------------------";
            say "round trip bug!!!";
            say "";
            say "orig:  $orig-stripped";
            say "rtrip: $stripped";
            die;
        }
    }
}
